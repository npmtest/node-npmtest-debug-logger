{"/home/travis/build/npmtest/node-npmtest-debug-logger/test.js":"/* istanbul instrument in package npmtest_debug_logger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-debug-logger/lib.npmtest_debug_logger.js":"/* istanbul instrument in package npmtest_debug_logger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_debug_logger = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_debug_logger = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-debug-logger/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-debug-logger && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_debug_logger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_debug_logger\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_debug_logger.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_debug_logger.rollup.js'] =\n            local.assetsDict['/assets.npmtest_debug_logger.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_debug_logger.__dirname + '/lib.npmtest_debug_logger.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-debug-logger/node_modules/debug-logger/debug-logger.js":"'use strict';\n\nvar util = require('util'),\n    vmDebug = require('debug'),\n    streamSpy = require('./stream-spy');\n\nexports = module.exports = debugLogger;\nexports.debug = vmDebug;\n\nexports.config = function config(options){\n  options = options || {};\n  if(options.ensureNewline){\n    ensureNewline();\n  }\n  if(options.inspectOptions){\n    exports.inspectOptions = options.inspectOptions;\n  }\n  if(options.levels){\n    merge(exports.levels, options.levels);\n  }\n  return debugLogger;\n};\n\nexports.inspectOptions = {};\n\nexports.colors = {\n  black :   0,\n  red :     1,\n  green :   2,\n  yellow :  3,\n  blue :    4,\n  magenta : 5,\n  cyan :    6,\n  white :   7\n};\nexports.colorReset = '\\x1b[0m';\n\nexports.levels = {\n  trace : {\n    color : exports.colors.cyan,\n    prefix : '',\n    namespaceSuffix : ':trace',\n    level : 0,\n    fd : 1  // currently only 1 (stdout) is supported. stderr is debug's standard\n  },\n  debug : {\n    color : exports.colors.blue,\n    prefix : '',\n    namespaceSuffix : ':debug',\n    level : 1,\n    fd : 1\n  },\n  log : {\n    color : '',\n    prefix : '  ',\n    namespaceSuffix : ':log',\n    level : 2,\n    fd : 1\n  },\n  info : {\n    color : exports.colors.green,\n    prefix : ' ',\n    namespaceSuffix : ':info',\n    level : 3,\n    fd : 1\n  },\n  warn : {\n    color : exports.colors.yellow,\n    prefix : ' ',\n    namespaceSuffix : ':warn',\n    level : 4\n  },\n  error : {\n    color : exports.colors.red,\n    prefix : '',\n    namespaceSuffix : ':error',\n    level : 5\n  }\n};\n\nexports.styles = {\n  underline : '\\x1b[4m'\n};\n\n\nfunction time(label){\n  this.timeLabels[label] = process.hrtime();\n}\n\nfunction timeEnd(label, level){\n  level = level || 'log';\n  var diff = process.hrtime(this.timeLabels[label]);\n  var diffMs = (diff[0] * 1e9 + diff[1]) / 1e6;\n  this[level](label + ':', diffMs + 'ms');\n  return diffMs;\n}\n\nfunction dir(obj, options, level){\n  if(!level && this[options]){\n    level = options;\n    options = undefined;\n  }\n  options = options || exports.inspectOptions;\n  level = level || 'log';\n  this[level](util.inspect(obj, options));\n}\n\nfunction assert(expression){\n  if (!expression) {\n    var level = 'error';\n    var arr = Array.prototype.slice.call(arguments, 1);\n    if(this[arr[arr.length-1]]){\n      level = arr[arr.length-1];\n      arr = arr.slice(0, -1);\n    }\n    var assrt = require('assert');\n    var err = new assrt.AssertionError({\n      message: util.format.apply(this, arr),\n      actual: false,\n      expected: true,\n      operator: '==',\n      stackStartFunction: assert\n    });\n    this[level](err);\n    throw err;\n  }\n}\n\n\nvar ensureNewlineEnabled = false;\nvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\nfunction ensureNewline(){\n  if(fd !== 1 && fd !== 2){ return; }\n  streamSpy.enable();\n  ensureNewlineEnabled = true;\n  return debugLogger;\n}\n\nfunction merge(object, source){\n  Object.keys(source).forEach(function(key){\n    var val = source[key];\n    \n    if(!object[key] || !isObject(val)){\n      object[key] = val;\n      return;\n    }\n    Object.keys(val).forEach(function(idx){\n      object[key][idx] = val[idx];\n    });\n  });\n}\n\nfunction getLogLevel(namespace) {\n  if(!process.env.DEBUG_LEVEL) {\n    return 0;\n  }\n  var debugLevel = process.env.DEBUG_LEVEL.toLowerCase();\n  if(debugLevel.indexOf('*:') === 0){\n    return hasLogLevel(debugLevel.slice(2)) || 0;\n  }\n  var hasLevel = hasLogLevel(debugLevel);\n  if(hasLevel !== null){\n    return hasLevel;\n  }\n  if(!namespace) {\n    return 0;\n  }\n  //currently we will only process the first part of namespace\n  var appNamespace = namespace.split(':')[0].toLowerCase();\n  \n  var debugLevelParts = debugLevel.split(',');\n  \n  var i;\n  for(i = 0; i < debugLevelParts.length; i++){\n    var parts = debugLevelParts[i].split(':');\n    if(appNamespace === parts[0]){\n      return hasLogLevel(parts[parts.length-1]) || 0;\n    }\n  }\n  return 0;\n}\n\nfunction hasLogLevel(level) {\n  if(!level) {\n    return null;\n  }\n  if (!isNaN(level)){\n    return level;\n  }\n  else if(isString(level) && exports.levels[level]){\n    return exports.levels[level].level || 0;\n  }\n  return null;\n}\n\nfunction isString(str){\n  return typeof str === 'string' || str instanceof String;\n}\n\nfunction isObject(obj){\n  return typeof obj === 'object' || obj instanceof Object;\n}\n\nfunction hasFormattingElements(str){\n  if(!str) { return false; }\n  var res = false;\n  ['%s', '%d', '%j', '%o'].forEach(function(elem){\n    if(str.indexOf(elem) >= 0) { \n      res = true; \n    }\n  });\n  return res;\n}\n\nfunction getErrorMessage(e) {\n  var errorStrings = ['' + e];\n\n  if (typeof e === 'undefined') {\n    return errorStrings;\n  }\n  if (e === null) {\n    return errorStrings;\n  }\n  if (e instanceof Date) {\n    return errorStrings;\n  }\n  if (e instanceof Error) {\n    errorStrings[0] = e.toString();\n    if (e.stack) {\n      errorStrings[1] = 'Stack trace';\n      errorStrings[2] = e.stack;\n    }\n    return errorStrings;\n  }\n  if (isObject(e)) {\n    var inspection = util.inspect(e, exports.inspectOptions);\n    if(inspection.length < 55){\n      errorStrings[0] = inspection;\n      return errorStrings;\n    }\n    if (typeof e.toString !== 'undefined') {\n      errorStrings[0] = e.toString();\n    }\n    errorStrings[1] = 'Inspected object';\n    errorStrings[2] = inspection;\n  }\n\n  return errorStrings;\n}\n\nfunction getForeColor(color){\n  if(!isNaN(color)){\n    return '\\x1b[3' + color + 'm';\n  }\n  else if(exports.colors[color]){\n    return '\\x1b[3' + exports.colors[color] + 'm';\n  }\n  return color;\n}\n\nfunction disableColors(loggerLevel, disable){\n  if(disable){\n    loggerLevel.color = '';\n    loggerLevel.reset = '';\n    loggerLevel.inspectionHighlight = '';\n  }\n}\n\nvar debugInstances = {};\nfunction getDebugInstance(namespace, color, fd){\n  if(!debugInstances[namespace]){\n    debugInstances[namespace] = vmDebug(namespace);\n    if(fd === 1 && isNaN(parseInt(process.env.DEBUG_FD))){\n      debugInstances[namespace].log = console.log.bind(console);\n    }\n    if(!isNaN(color)){\n      debugInstances[namespace].color = color;\n    }\n  }\n  return debugInstances[namespace]; \n}\n\n\nfunction debugLogger(namespace) {\n  var levels = exports.levels;\n  var debugLoggers = { 'default': getDebugInstance.bind(this, namespace, '') };\n\n  var logger = function(){\n    debugLoggers['default']().apply(this, arguments);\n  };\n  logger.logLevel = getLogLevel(namespace);\n  \n  logger.timeLabels = {};\n  logger.time = time;\n  logger.timeEnd = timeEnd;\n  logger.dir = dir;\n  logger.assert = assert;\n  \n  Object.keys(levels).forEach(function(levelName) {\n    var loggerNamespaceSuffix = levels[levelName].namespaceSuffix ? levels[levelName].namespaceSuffix : 'default';\n    if(!debugLoggers[loggerNamespaceSuffix]){\n      debugLoggers[loggerNamespaceSuffix] = getDebugInstance.bind(this, namespace + loggerNamespaceSuffix, levels[levelName].color, levels[levelName].fd);\n    }\n    var levelLogger = debugLoggers[loggerNamespaceSuffix];\n    \n    var initialized = false;\n\n    function logFn() {\n      if (logger.logLevel > logger[levelName].level) { return; }\n      \n      var levelLog = levelLogger();\n      if(!levelLog.enabled) { return; }\n      \n      if(!initialized){\n        initialized = true;\n        disableColors(logger[levelName], !levelLog.useColors);\n      }\n      \n      if (isString(arguments[0]) && hasFormattingElements(arguments[0])){\n        arguments[0] = logger[levelName].color + levels[levelName].prefix + logger[levelName].reset + arguments[0];\n        return levelLog.apply(this, arguments);\n      }\n      \n      var selfArguments = arguments;\n      var errorStrings = Object.keys(selfArguments).map(function(key){\n        return getErrorMessage(selfArguments[key]);\n      });\n      var message = \"\";\n      var inspections = \"\";\n      \n      var i, param;\n      var n = 1;\n      for(i=0; i<errorStrings.length; i++){\n        param = errorStrings[i];\n        message += i === 0 ? param[0] : ' ' + param[0];\n        if (param.length > 1) {\n          var highlightStack = param[1].indexOf('Stack') >= 0 ? logger[levelName].color : '';\n          inspections += '\\n' +\n            logger[levelName].inspectionHighlight + '___' + param[1] + ' #' + n++ + '___' + logger[levelName].reset +'\\n' +\n            highlightStack + param[2] + logger[levelName].reset;\n        }\n      };\n      \n      levelLog(logger[levelName].color + levels[levelName].prefix + logger[levelName].reset + message + inspections);\n    };\n\n    function logNewlineFn() {\n      if (streamSpy.lastCharacter !== '\\n') {\n        vmDebug.log('');\n      }\n      logFn.apply(logFn, arguments);\n    };\n\n    logger[levelName] = ensureNewlineEnabled ? logNewlineFn : logFn;\n    logger[levelName].level = levels[levelName].level;\n    logger[levelName].logger  = function(){ return levelLogger(); };\n    logger[levelName].enabled = function(){ return logger.logLevel <= logger[levelName].level && levelLogger().enabled; };\n    logger[levelName].color = getForeColor(levels[levelName].color);\n    logger[levelName].reset = exports.colorReset;\n    logger[levelName].inspectionHighlight = exports.styles.underline;\n  });\n\n  return logger;\n}\n","/home/travis/build/npmtest/node-npmtest-debug-logger/node_modules/debug-logger/stream-spy.js":"\n\n/**\n * Hooking into Node.js stdout\n * Based on: https://gist.github.com/pguillory/729616 by @pguillory\n * \n * @param {Object} callback\n */\nfunction hook_stream(stream, callback) {\n  var old_write = stream.write;\n\n  stream.write = (function(write) {\n    return function(string, encoding, fd) {\n      write.apply(stream, arguments);\n      callback(string, encoding, fd);\n    };\n  })(stream.write);\n\n  return function() {\n    stream.write = old_write;\n  };\n};\n\n\nmodule.exports.lastCharacter = '\\n';\nfunction getLastCharacter(string, encoding, fd){\n  module.exports.lastCharacter = string.slice(-1);\n}\n\nvar unhook;\nvar unhookStderr;\nmodule.exports.enable = function enable(){\n  if(!unhook){\n    unhook = hook_stream(process.stdout, getLastCharacter);\n  }\n  if(!unhookStderr){\n    unhookStderr = hook_stream(process.stderr, getLastCharacter);\n  }\n};\n\nmodule.exports.disable = function disable(){\n  if(unhook){\n    unhook();\n    unhook = undefined;\n  }\n  if(unhookStderr){\n    unhookStderr();\n    unhookStderr = undefined;\n  }\n};\n"}